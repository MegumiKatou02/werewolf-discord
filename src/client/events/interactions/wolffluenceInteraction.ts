import {
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  type Interaction,
  MessageFlags,
} from 'discord.js';

import type { GameRoom } from '../../../../core/room.js';
import { Faction } from '../../../../types/faction.js';
import type Player from '../../../../types/player.js';
import Wolffluence from '../../../../types/roles/Wolffluencer.js';
import { WEREROLE } from '../../../../utils/role.js';

class WolffluenceInteraction {
  isButton = async (interaction: Interaction) => {
    if (!interaction.isButton()) {
      return;
    }

    const playerId = interaction.customId.split('_')[3];

    if (interaction.user.id !== playerId) {
      return interaction.reply({
        content: 'B·∫°n kh√¥ng ƒë∆∞·ª£c nh·∫•n n√∫t n√†y.',
        flags: MessageFlags.Ephemeral,
      });
    }

    const modal = new ModalBuilder()
      .setCustomId(`submit_ffluence_wolf_${playerId}`)
      .setTitle('Vote ng∆∞·ªùi ch∆°i thao t√∫ng');

    const input = new TextInputBuilder()
      .setCustomId('vote_index_ffluence')
      .setLabel('Nh·∫≠p s·ªë th·ª© t·ª± ng∆∞·ªùi ch∆°i (b·∫Øt ƒë·∫ßu t·ª´ 1)')
      .setStyle(TextInputStyle.Short)
      .setPlaceholder('VD: 3')
      .setRequired(true);

    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(input);
    modal.addComponents(row);

    try {
      await interaction.showModal(modal);
    } catch (err) {
      console.error('‚ùå L·ªói khi showModal:', err);

      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content: 'T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.',
          flags: MessageFlags.Ephemeral,
        });
      }
    }
  };
  isModalSubmit = async (
    interaction: Interaction,
    gameRoom: GameRoom,
    sender: Player,
  ) => {
    if (!interaction.isModalSubmit()) {
      return;
    }

    if (!gameRoom || gameRoom.gameState.phase !== 'night') {
      return;
    }

    await interaction.deferReply({ flags: MessageFlags.Ephemeral });

    const playerId = interaction.customId.split('_')[3];

    if (interaction.user.id !== playerId) {
      return interaction.editReply({
        content: 'B·∫°n kh√¥ng ƒë∆∞·ª£c g·ª≠i form n√†y.',
      });
    }

    const voteIndexStr =
      interaction.fields.getTextInputValue('vote_index_ffluence');
    const voteIndex = parseInt(voteIndexStr, 10);

    if (
      isNaN(voteIndex) ||
      voteIndex < 1 ||
      voteIndex > gameRoom.players.length
    ) {
      return interaction.editReply({
        content: 'S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.',
      });
    }

    const targetPlayer = gameRoom.players[voteIndex - 1];

    if (
      sender.role &&
      sender.role.id === WEREROLE.WOLFFLUENCE &&
      sender.role instanceof Wolffluence
    ) {
      if (!targetPlayer.alive) {
        return interaction.editReply({
          content: 'Kh√¥ng c√≥ t√°c d·ª•ng l√™n ng∆∞·ªùi ch·∫øt',
        });
      }

      if (targetPlayer.role.faction === Faction.WEREWOLF) {
        return interaction.editReply({
          content: 'B·∫°n kh√¥ng th·ªÉ thao t√∫ng ƒë·ªìng minh.',
        });
      }

      if (targetPlayer.userId === sender.userId) {
        return interaction.editReply({
          content: 'B·∫°n kh√¥ng th·ªÉ thao t√∫ng ch√≠nh b·∫°n.',
        });
      }

      sender.role.influencePlayer = targetPlayer.userId;
    }

    try {
      const user = await gameRoom.fetchUser(playerId);
      if (user) {
        await user.send(`ü™° B·∫°n ƒë√£ ch·ªçn ng∆∞·ªùi ch∆°i ƒë·ªÉ thao t√∫ng: **${targetPlayer.name}**.`);
      }
    } catch (err) {
      console.error(`Kh√¥ng th·ªÉ g·ª≠i DM cho ${playerId}:`, err);
    }

    await interaction.editReply({
      content: '‚úÖ Vote c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.',
    });
  };
}

export default new WolffluenceInteraction();
