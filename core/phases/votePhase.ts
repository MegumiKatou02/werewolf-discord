import { AttachmentBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, type APIActionRowComponent, type APIButtonComponent } from 'discord.js';

import rolesData from '../../data/data.json' with { type: 'json' };
import { processVote, revealRoles } from '../../src/game/helper.js';
import Dead from '../../types/roles/Dead.js';
import Villager from '../../types/roles/Villager.js';
import Werewolf from '../../types/roles/WereWolf.js';
import { WEREROLE } from '../../utils/role.js';
import { createAvatarCollage } from '../canvas.js';
import type { GameRoom } from '../room.js';

export async function votePhase(room: GameRoom): Promise<void> {
  if (room.status === 'ended') {
    return;
  }
  room.gameState.phase = 'voting';
  room.emit('vote', room.guildId, room.players, room.gameState);

  const dmPromises = room.players.map(async (player) => {
    const user = await room.fetchUser(player.userId);
    if (!user) {
      return;
    }
    await user.send(
      `üó≥Ô∏è Th·ªùi gian b·ªè phi·∫øu ƒë√£ ƒë·∫øn. Ng∆∞·ªùi c√≥ s·ªë phi·∫øu cao nh·∫•t v√† c√≥ √≠t nh·∫•t 2 phi·∫øu s·∫Ω b·ªã treo c·ªï. H√£y ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën lo·∫°i tr·ª´ trong ${room.settings.voteTime} gi√¢y t·ªõi.\nüí° Nh·∫≠p s·ªë 0 ho·∫∑c 36 ƒë·ªÉ b·ªè qua vote.`,
    );

    const buffer = await createAvatarCollage(room.players, room.client);
    const attachment = new AttachmentBuilder(buffer, { name: 'avatars.png' });

    const embed = new (await import('discord.js')).EmbedBuilder()
      .setTitle('üìã Danh s√°ch ng∆∞·ªùi ch∆°i')
      .setColor(0x00ae86)
      .setImage('attachment://avatars.png')
      .setTimestamp();

    const components: ActionRowBuilder<ButtonBuilder>[] = [];
    if (player.alive) {
      const voteButton = new ButtonBuilder()
        .setCustomId(`vote_hanged_${player.userId}`)
        .setLabel('üó≥Ô∏è Vote ng∆∞·ªùi b·ªã treo')
        .setStyle(ButtonStyle.Primary);

      if (!player.canVote) {
        voteButton.setDisabled(true);
      }

      const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
        voteButton,
      );
      components.push(row);
    }
    const message = await user.send({
      embeds: [embed],
      files: [attachment],
      components,
    });
    room.voteMessages.set(player.userId, message);
  });

  await room.safePromiseAllSettled(dmPromises);

  const timeoutPromise = new Promise((resolve) =>
    room.addTimeout(() => resolve('timeout'), room.settings.voteTime * 1000),
  );

  // eslint-disable-next-line no-unused-vars
  let voteCompleteResolve: ((value: unknown) => void) | undefined;
  const voteCompletePromise = new Promise((resolve) => {
    voteCompleteResolve = resolve;
    room.once('voteComplete', resolve);
  });

  // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
  const notificationPromise = new Promise<void>((resolve) => {
    room.addTimeout(
      async () => {
        const playerMessages = room.players.map(player => ({
          userId: player.userId,
          content: '### ‚ö†Ô∏è Th√¥ng b√°o: c√≤n **10** gi√¢y n·ªØa h·∫øt th·ªùi gian vote!',
        }));

        await room.batchSendMessages(playerMessages);
        resolve();
      },
      room.settings.voteTime * 1000 - 10000,
    );
  });

  // **check
  // room.trackPromise(timeoutPromise as Promise<unknown>);
  // room.trackPromise(voteCompletePromise as Promise<unknown>);
  // room.trackPromise(notificationPromise as Promise<unknown>);

  try {
    await Promise.race([timeoutPromise, voteCompletePromise]);
  } finally {
    if (voteCompleteResolve) {
      room.removeListener('voteComplete', voteCompleteResolve);
    }
  }

  for (const [playerId, message] of room.voteMessages) {
    try {
      if (message.components && message.components.length > 0) {
        const row = ActionRowBuilder.from(
          message.components[0] as APIActionRowComponent<APIButtonComponent>,
        ) as ActionRowBuilder<ButtonBuilder>;
        (row.components[0] as ButtonBuilder)
          .setDisabled(true)
          .setLabel('üó≥Ô∏è Vote (H·∫øt h·∫°n)');
        await message.edit({ components: [row] });
      }
    } catch (err) {
      console.error(`Kh√¥ng th·ªÉ disable button cho ${playerId}:`, err);
    }
  }
  room.voteMessages.clear();

  const resultHangedPlayer = processVote(room.players);

  if (!resultHangedPlayer) {
    room.gameState.addLog('Kh√¥ng ai b·ªã treo c·ªï do kh√¥ng ƒë·ªß phi·∫øu b·∫ßu\n');
    const noHangPromises = room.players.map(async (player) => {
      const user = await room.fetchUser(player.userId);
      if (!user) {
        return;
      }
      await user.send(
        'üé≠ Kh√¥ng ƒë·ªß s·ªë phi·∫øu ho·∫∑c c√≥ nhi·ªÅu ng∆∞·ªùi c√πng s·ªë phi·∫øu cao nh·∫•t, kh√¥ng ai b·ªã treo c·ªï trong ng√†y h√¥m nay.',
      );
    });
    await room.safePromiseAllSettled(noHangPromises);
  } else {
    room.gameState.addLog(
      `**${resultHangedPlayer.hangedPlayer.name}** ƒë√£ b·ªã d√¢n l√†ng treo c·ªï`,
    );
    if (resultHangedPlayer.hangedPlayer.role.id === WEREROLE.FOOL) {
      room.gameState.addLog(
        `**${resultHangedPlayer.hangedPlayer.name}** l√† Th·∫±ng Ng·ªë - Th·∫±ng Ng·ªë th·∫Øng!`,
      );
      room.status = 'ended';
      const foolMessages = room.players.map(async (player) => {
        const user = await room.fetchUser(player.userId);
        if (!user) {
          return;
        }
        await user.send(
          `üé≠ **${resultHangedPlayer.hangedPlayer.name}** l√† **Ng·ªë** v√† ƒë√£ b·ªã treo c·ªï. \nüéâ **Ng·ªë** th·∫Øng !!.`,
        );
        const roleRevealEmbed = revealRoles(room.players);
        await user.send({ embeds: [roleRevealEmbed] });
      });
      await room.safePromiseAllSettled(foolMessages);
      return;
    }

    const maidNewRole = await room.checkIfMasterIsDead(resultHangedPlayer.hangedPlayer);

    const hangMessages = room.players.map(async (player) => {
      const user = await room.fetchUser(player.userId);
      if (!user) {
        return;
      }
      await user.send(
        `üé≠ **${resultHangedPlayer.hangedPlayer.name}** ƒë√£ b·ªã d√¢n l√†ng treo c·ªï v√¨ c√≥ s·ªë phi·∫øu cao nh·∫•t (${resultHangedPlayer.maxVotes} phi·∫øu).`,
      );
      if (resultHangedPlayer.hangedPlayer.userId === player.userId) {
        await user.send('üíÄ B·∫°n ƒë√£ b·ªã d√¢n l√†ng treo c·ªï.');
      }
      if (maidNewRole) {
        await user.send(
          `### üëí H·∫ßu g√°i ƒë√£ l√™n thay vai tr√≤ **${maidNewRole}** c·ªßa ch·ªß v√¨ ch·ªß ƒë√£ b·ªã treo c·ªï.\n`,
        );
      }
    });

    await room.safePromiseAllSettled(hangMessages);
  }

  const normalWolvesAlive = room.players.filter(
    (p) => p.alive && p.role.faction === 0 && p.role.id === WEREROLE.WEREWOLF,
  );
  const otherWolvesAlive = room.players.filter(
    (p) => p.alive && p.role.faction === 0 && p.role.id !== WEREROLE.WEREWOLF,
  );

  if (normalWolvesAlive.length === 0 && otherWolvesAlive.length > 0) {
    const wolfTransformPromises = otherWolvesAlive.map(async (wolf) => {
      wolf.role = new Werewolf();
      const user = await room.fetchUser(wolf.userId);
      if (user) {
        return user.send(
          '### üê∫ V√¨ kh√¥ng c√≤n S√≥i th∆∞·ªùng n√†o s·ªëng s√≥t, b·∫°n ƒë√£ bi·∫øn th√†nh S√≥i th∆∞·ªùng!',
        );
      }
    });

    await room.safePromiseAllSettled(wolfTransformPromises);

    room.gameState.addLog(
      `üê∫ **${otherWolvesAlive.length}** S√≥i ch·ª©c nƒÉng ƒë√£ bi·∫øn th√†nh **S√≥i th∆∞·ªùng** v√¨ kh√¥ng c√≤n S√≥i th∆∞·ªùng n√†o s·ªëng s√≥t.`,
    );
  }

  const giaLang = room.players.find(
    (p) =>
      !p.alive &&
      p.role.id === WEREROLE.DEAD &&
      p.role instanceof Dead &&
      p.role.originalRoleId === WEREROLE.ELDER,
  );
  if (giaLang && !giaLang.alive) {
    const dmVillagerPromise = room.players
      .filter(
        (p) =>
          (p.alive && p.role.faction === 1) || p.role.id === WEREROLE.ELDER,
      )
      .map(async (player) => {
        const user = await room.fetchUser(player.userId);
        if (!user) {
          return;
        }
        await user.send(
          '### üë¥ Gi√† l√†ng ƒë√£ ch·∫øt, t·∫•t c·∫£ nh·ªØng ng∆∞·ªùi thu·ªôc phe d√¢n l√†ng ƒë·ªÅu s·∫Ω b·ªã m·∫•t ch·ª©c nƒÉng.',
        );
        room.gameState.addLog(
          'üë¥ Gi√† l√†ng ƒë√£ ch·∫øt, t·∫•t c·∫£ nh·ªØng ng∆∞·ªùi thu·ªôc phe d√¢n l√†ng ƒë·ªÅu s·∫Ω b·ªã m·∫•t ch·ª©c nƒÉng.',
        );
        player.role = new Villager();
      });
    await room.safePromiseAllSettled(dmVillagerPromise);
  }

  const loudmouthDead = room.players.find((p) => p.role instanceof Dead && p.role.originalRoleId === WEREROLE.LOUDMOUTH && p.role.deathNight === room.gameState.nightCount);
  if (loudmouthDead && loudmouthDead.role instanceof Dead) {
    const revealPlayerId = loudmouthDead.role.getStoreInformation().loudmouthPlayer;
    const revealPlayer = room.players.find((p) => p.userId === revealPlayerId);

    const dmLoudmouthPromise = room.players.map(async (player) => {
      const user = await room.fetchUser(player.userId);
      if (!user) {
        return;
      }
      await user.send(
        `### üë¶ C·∫≠u b√© mi·ªáng b·ª± ƒë√£ ch·∫øt, role c·ªßa **${revealPlayer?.name}** l√† **${revealPlayer?.role instanceof Dead ? rolesData[revealPlayer?.role.originalRoleId.toString() as keyof typeof rolesData].title : revealPlayer?.role.name}**`,
      );
    });
    await room.safePromiseAllSettled(dmLoudmouthPromise);
  }
  for (const player of room.players) {
    player.role.voteHanged = null;
    player.resetRestrict();
    player.role.resetRestrict();
  }

  await room.checkEndGame();
}
