import {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  PermissionFlagsBits,
  type Interaction,
  type MessageComponentInteraction,
  PermissionsBitField,
} from 'discord.js';
import { gameRooms } from '../core/room.js';

export default {
  data: new SlashCommandBuilder()
    .setName('clear-room')
    .setDescription('X√≥a ph√≤ng ch∆°i Ma S√≥i trong server'),

  async execute(interaction: Interaction) {
    if (!interaction.isChatInputCommand()) {
      return;
    }

    if (!interaction.inGuild()) {
      return await interaction.reply({
        content: 'L·ªánh n√†y ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c trong server.',
        ephemeral: true,
      });
    }

    const guildId = interaction.guildId;
    const gameRoom = gameRooms.get(guildId);

    if (!gameRoom) {
      return interaction.reply({
        content: '‚ùå Kh√¥ng c√≥ ph√≤ng ch∆°i n√†o trong server n√†y.',
        ephemeral: true,
      });
    }

    const isAdmin =
      (interaction.member?.permissions instanceof PermissionsBitField &&
        interaction.member.permissions.has(
          PermissionFlagsBits.Administrator
        )) ??
      false;
    const isHost = gameRoom.hostId === interaction.user.id;
    const isDev = interaction.user.id === process.env.DEVELOPER;

    if (!isAdmin && !isHost && !isDev) {
      return interaction.reply({
        content: '‚ùå Ch·ªâ Admin/Host/Dev m·ªõi c√≥ th·ªÉ x√≥a ph√≤ng.',
        ephemeral: true,
      });
    }

    if (gameRoom.status === 'starting') {
      return interaction.reply({
        content: '‚ùå Kh√¥ng th·ªÉ x√≥a ph√≤ng ch∆°i khi tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu!',
        ephemeral: true,
      });
    }

    if (gameRoom.status === 'ended') {
      gameRooms.delete(guildId);
      return interaction.reply({
        content: '‚úÖ ƒê√£ x√≥a ph√≤ng ch∆°i.',
        ephemeral: true,
      });
    }

    const warningEmbed = new EmbedBuilder()
      .setColor(0xff0000)
      .setTitle('‚ö†Ô∏è C·∫£nh B√°o X√≥a Ph√≤ng')
      .setDescription('```B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng ch∆°i kh√¥ng?```')
      .addFields(
        {
          name: 'üìä Tr·∫°ng Th√°i Ph√≤ng',
          value: `\`${gameRoom.status === 'starting' ? 'üéÆ ƒêang ch∆°i' : '‚åõ ƒêang ch·ªù'}\``,
          inline: true,
        },
        {
          name: 'üë• S·ªë Ng∆∞·ªùi Ch∆°i',
          value: `\`${gameRoom.players.length}\``,
          inline: true,
        }
      )
      .setFooter({ text: '‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!' });

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId('confirm_clear_room')
        .setLabel('‚úÖ X√°c Nh·∫≠n X√≥a')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('cancel_clear_room')
        .setLabel('‚ùå H·ªßy')
        .setStyle(ButtonStyle.Secondary)
    );

    const response = await interaction.reply({
      embeds: [warningEmbed],
      components: [row],
      ephemeral: true,
    });

    const collector = response.createMessageComponentCollector({
      time: 30000,
    });

    collector.on('collect', async (i: MessageComponentInteraction) => {
      if (i.user.id !== interaction.user.id) {
        await i.reply({
          content: '‚ùå B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y.',
          ephemeral: true,
        });
        return;
      }

      if (i.customId === 'confirm_clear_room') {
        gameRooms.delete(guildId);
        await i.update({
          content: '‚úÖ ƒê√£ x√≥a ph√≤ng ch∆°i th√†nh c√¥ng.',
          embeds: [],
          components: [],
        });

        const channel = interaction.channel;
        if (channel) {
          channel.send(
            `‚úÖ Ph√≤ng ch∆°i trong server ƒë√£ b·ªã x√≥a b·ªüi <@${i.user.id}>.`
          );
        }
      } else if (i.customId === 'cancel_clear_room') {
        await i.update({
          content: '‚ùå ƒê√£ h·ªßy x√≥a ph√≤ng.',
          embeds: [],
          components: [],
        });
      }

      collector.stop();
    });

    collector.on('end', async (_, reason: string) => {
      if (reason === 'time') {
        await interaction.editReply({
          content: '‚åõ ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n.',
          embeds: [],
          components: [],
        });
      }
    });
  },
};
